// Generated by Cursor
import { useState, useRef, useEffect } from "react";
import { type CanvasElement } from "../../types/canvas";

interface TransformHandlesProps {
  element: CanvasElement;
  onUpdate: (updates: Partial<CanvasElement>) => void;
  onCommit: () => void;
}

type ResizeHandle = "nw" | "ne" | "sw" | "se" | "n" | "s" | "e" | "w";

export default function TransformHandles({
  element,
  onUpdate,
  onCommit,
}: TransformHandlesProps) {
  const [isDragging, setIsDragging] = useState(false);
  const [isResizing, setIsResizing] = useState(false);
  const [isRotating, setIsRotating] = useState(false);
  const startPosRef = useRef({ x: 0, y: 0 });
  const startElementRef = useRef({
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    rotation: 0,
  });
  const resizeHandleRef = useRef<ResizeHandle | null>(null);

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      if (isDragging) {
        const dx = e.clientX - startPosRef.current.x;
        const dy = e.clientY - startPosRef.current.y;
        onUpdate({
          x: startElementRef.current.x + dx,
          y: startElementRef.current.y + dy,
        });
      } else if (isResizing && resizeHandleRef.current) {
        handleResize(e);
      } else if (isRotating) {
        handleRotate(e);
      }
    };

    const handleMouseUp = () => {
      if (isDragging || isResizing || isRotating) {
        onCommit();
      }
      setIsDragging(false);
      setIsResizing(false);
      setIsRotating(false);
      resizeHandleRef.current = null;
    };

    if (isDragging || isResizing || isRotating) {
      document.addEventListener("mousemove", handleMouseMove);
      document.addEventListener("mouseup", handleMouseUp);
      return () => {
        document.removeEventListener("mousemove", handleMouseMove);
        document.removeEventListener("mouseup", handleMouseUp);
      };
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isDragging, isResizing, isRotating]);

  const handleMouseDown = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsDragging(true);
    startPosRef.current = { x: e.clientX, y: e.clientY };
    startElementRef.current = {
      x: element.x,
      y: element.y,
      width: element.width,
      height: element.height,
      rotation: element.rotation,
    };
  };

  const handleResizeMouseDown = (e: React.MouseEvent, handle: ResizeHandle) => {
    e.stopPropagation();
    setIsResizing(true);
    resizeHandleRef.current = handle;
    startPosRef.current = { x: e.clientX, y: e.clientY };
    startElementRef.current = {
      x: element.x,
      y: element.y,
      width: element.width,
      height: element.height,
      rotation: element.rotation,
    };
  };

  const handleResize = (e: MouseEvent) => {
    const dx = e.clientX - startPosRef.current.x;
    const dy = e.clientY - startPosRef.current.y;
    const handle = resizeHandleRef.current;

    let newX = startElementRef.current.x;
    let newY = startElementRef.current.y;
    let newWidth = startElementRef.current.width;
    let newHeight = startElementRef.current.height;

    switch (handle) {
      case "se":
        newWidth = Math.max(20, startElementRef.current.width + dx);
        newHeight = Math.max(20, startElementRef.current.height + dy);
        break;
      case "sw":
        newWidth = Math.max(20, startElementRef.current.width - dx);
        newHeight = Math.max(20, startElementRef.current.height + dy);
        newX = startElementRef.current.x + dx;
        break;
      case "ne":
        newWidth = Math.max(20, startElementRef.current.width + dx);
        newHeight = Math.max(20, startElementRef.current.height - dy);
        newY = startElementRef.current.y + dy;
        break;
      case "nw":
        newWidth = Math.max(20, startElementRef.current.width - dx);
        newHeight = Math.max(20, startElementRef.current.height - dy);
        newX = startElementRef.current.x + dx;
        newY = startElementRef.current.y + dy;
        break;
      case "e":
        newWidth = Math.max(20, startElementRef.current.width + dx);
        break;
      case "w":
        newWidth = Math.max(20, startElementRef.current.width - dx);
        newX = startElementRef.current.x + dx;
        break;
      case "n":
        newHeight = Math.max(20, startElementRef.current.height - dy);
        newY = startElementRef.current.y + dy;
        break;
      case "s":
        newHeight = Math.max(20, startElementRef.current.height + dy);
        break;
    }

    onUpdate({ x: newX, y: newY, width: newWidth, height: newHeight });
  };

  const handleRotateMouseDown = (e: React.MouseEvent) => {
    e.stopPropagation();
    setIsRotating(true);
    startPosRef.current = { x: e.clientX, y: e.clientY };
    startElementRef.current = {
      x: element.x,
      y: element.y,
      width: element.width,
      height: element.height,
      rotation: element.rotation,
    };
  };

  const handleRotate = (e: MouseEvent) => {
    const centerX = element.x + element.width / 2;
    const centerY = element.y + element.height / 2;

    const startAngle = Math.atan2(
      startPosRef.current.y - centerY,
      startPosRef.current.x - centerX
    );
    const currentAngle = Math.atan2(e.clientY - centerY, e.clientX - centerX);

    const deltaAngle = (currentAngle - startAngle) * (180 / Math.PI);
    const newRotation = startElementRef.current.rotation + deltaAngle;

    onUpdate({ rotation: newRotation });
  };

  const handleStyle: React.CSSProperties = {
    position: "absolute",
    width: 10,
    height: 10,
    backgroundColor: "#3b82f6",
    border: "2px solid white",
    borderRadius: "50%",
    cursor: "pointer",
  };

  return (
    <div
      style={{
        position: "absolute",
        left: element.x,
        top: element.y,
        width: element.width,
        height: element.height,
        transform: `rotate(${element.rotation}deg)`,
        transformOrigin: "center",
        pointerEvents: "none",
      }}
    >
      {/* Bounding box */}
      <div
        style={{
          position: "absolute",
          inset: 0,
          border: "2px solid #3b82f6",
          cursor: "move",
          pointerEvents: "all",
        }}
        onMouseDown={handleMouseDown}
      />

      {/* Corner handles */}
      <div
        style={{ ...handleStyle, top: -6, left: -6, pointerEvents: "all" }}
        onMouseDown={(e) => handleResizeMouseDown(e, "nw")}
      />
      <div
        style={{ ...handleStyle, top: -6, right: -6, pointerEvents: "all" }}
        onMouseDown={(e) => handleResizeMouseDown(e, "ne")}
      />
      <div
        style={{ ...handleStyle, bottom: -6, left: -6, pointerEvents: "all" }}
        onMouseDown={(e) => handleResizeMouseDown(e, "sw")}
      />
      <div
        style={{ ...handleStyle, bottom: -6, right: -6, pointerEvents: "all" }}
        onMouseDown={(e) => handleResizeMouseDown(e, "se")}
      />

      {/* Edge handles */}
      <div
        style={{
          ...handleStyle,
          top: -6,
          left: "50%",
          marginLeft: -6,
          pointerEvents: "all",
        }}
        onMouseDown={(e) => handleResizeMouseDown(e, "n")}
      />
      <div
        style={{
          ...handleStyle,
          bottom: -6,
          left: "50%",
          marginLeft: -6,
          pointerEvents: "all",
        }}
        onMouseDown={(e) => handleResizeMouseDown(e, "s")}
      />
      <div
        style={{
          ...handleStyle,
          left: -6,
          top: "50%",
          marginTop: -6,
          pointerEvents: "all",
        }}
        onMouseDown={(e) => handleResizeMouseDown(e, "w")}
      />
      <div
        style={{
          ...handleStyle,
          right: -6,
          top: "50%",
          marginTop: -6,
          pointerEvents: "all",
        }}
        onMouseDown={(e) => handleResizeMouseDown(e, "e")}
      />

      {/* Rotation handle */}
      <div
        style={{
          position: "absolute",
          top: -30,
          left: "50%",
          marginLeft: -6,
          width: 12,
          height: 12,
          backgroundColor: "#10b981",
          border: "2px solid white",
          borderRadius: "50%",
          cursor: "grab",
          pointerEvents: "all",
        }}
        onMouseDown={handleRotateMouseDown}
      />
      <div
        style={{
          position: "absolute",
          top: -30,
          left: "50%",
          marginLeft: -1,
          width: 2,
          height: 24,
          backgroundColor: "#10b981",
        }}
      />
    </div>
  );
}
